# -*- coding: utf-8 -*-
"""
Created on Thu Sep 16 03:21:47 2021

@author: 82108
"""

# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

# 다행 주석처리 
''' 
오늘 하루도 행복하자
'''

# 한 행 주석처리
# 오늘 하루도 행복하자 

1990년 암스트레담 귀도 반 로섬(Guido Van Rossum) 개발한 
interpreter language (한줄씩 소스 코드를 해석해서
                     바로 실행해 결과를 확인 할 수 있도록 하는 언어)

python 특징
- 문법이 아주 쉽다
- 가독성이 좋다
- 풍부한 라이브러리
    - numpy : 수학, 과학 모듈(관련성 있는)
    - pandas : 데이터 검색 모듈 
    - beautiple soup : 웹스크래핑 모듈  
    - scikit-learn :머신러닝 모듈
- 이식성이 좋다
    - 쉽게 라이브러리를 추가 할 수 있다.
    - 서로 다른 운영체제에서 개발한 파이썬 프로그램을 어디서든지
        사용가능하다.
    - C 언어로 개발됨 (c 계열에서 사용하기 편하다)
- 무료 
- 동적 타이밍 
    - 메모리 관리를 자동으로 한다
    - 런타임시에 DATA TYPE을 체크하는 동적 타이밍을 지원
    
print('오늘 하루도 행복하자')
print("오늘 하루도 행복하자")

# 사칙연산
1+2 
2-1
2*3
7/2
7//2 # 몫
7%2 #나머지
2**3 # 제곱연산

import math #수학에 관련된 method를 모아놓은 라이브러리
math.pow(2,3) # 제곱을 표현하는 함수 
1+2*3**2

# 연산자 우선순위
0.()
1.**
2.*,/
3. +,-

# 한행 주석
''' 
여러행
주석 
'''
"""
여러행 주석
"""

# 변수
- 데이터를 저장할 수 있는 메모리 공간
- 첫글자는 영문, _(밑줄)
- 두번째 글자부터는 영문. 숫자, _ 
- 대소문자를 구분한다
- 예약어는 사용할 수 없다.

import keyword
keyword.kwlist

# 데이터 타입 확인 
## R 에서의 vector가 파이썬에서의 리스트
type(keyword.kwlist)

# python은 대소문자를 구분한다
x = 10
x
type(x)

X= 10.0 
X 
type(X)

dir()# 현재 메모리에 생성된 생성자를 확인 가능함 

del x  # 변수 삭제
del X

x = 10.4*(10**3) 
x
f = 10.4e3 #지수표현 가능
f

type(f)

# 연산자 축약
x = 1
x = x + 1 # x += 1 
x = x - 1 # x -= 1 
x = x * 1 # x *= 1
x = x / 1 # x /= 1
x = x // 1 # x //= 1 
x = x % 1 # x %= 1 

[문제1] x,y 변수에 있는 값을 기준으로 수행한 결과 입니다. 
x 와 y 변수에 어떤 값이 있어야 하나요.
또한 결과값이 나오기 위해서 어떤 계산식을 만들어야 하는지 계산식을 만들어 보세요.

x=2
y=5

# x+y
result_1 =  7

# y-x
result_2 =  3

# x-y
result_3 =  -3

# x*y
result_4 =  10

# x/y
result_5 =  0.4

# x//y
result_6 =  0

# x%y
result_7 =  2

# x**y
result_8 =  32

# math.pow(x,y)-math.pow(y,x)
## y/x*x+x/y*y
result_9 =  7.0    
    
# (x+y)*(x-y)
result_10 =  -21

# (y**x)*x
result_11 =  50

# (y**x)+x**x
result_12 =  29


# 논리연산자
x = 1
y = 2

x == y # 같다
x != y # 같지 않다 
x > y # 크다
x >= y # 크거나 같다
x < y # 작다
x <= y # 작거나 같다

2 > 1 and 3 > 2 
2 > 1 or 3 < 2 

True and False 
True or False 

type(True or False)
not 1>2

# 문자열
str = '열심히 공부하자'
type(str)

str = '''열심히 
공부하자'''
str
print(str)
type(str)

str = """열심히 
공부하자"""
str
print(str)
type(str)

str = '열심히 \n 공부하자' # \n : 줄바꿈
str = '열심히 \t 공부하자' # \t : 탭 
str
print(str)
type(str)

x = '제임스'
y = '파이썬 개발자 '

type(x)

# 문자 연결연산자 
x + y

# 문자+숫자 오류
x + 100

# 숫자를 문자형으로 변경 후 오류 해결 
x + '100'

#문자 복제 가능 
(x + y) * 2 

'오늘 하루도 행복하자'*100

name = '제임스'
music= '발라드'

# + 는 paste0 기능
print('hello'+name)

# , 는 paste 기능
print('hello',name,'입니다','즐겨듣는 음악은',music)

# 중괄호( {} ) : 위치 입력 
print("안녕하세요 {}입니다. 즐겨듣는 음악음 {}입니다".format(name,music))
print("안녕하세요 {0}입니다. 즐겨듣는 음악은 {1}입니다".format(name,music))

# %s:  %(변수)로 입력
print("안녕하세요 %s입니다. 즐겨듣는 음악은 %s입니다"%(name,music))

# 선언 후 사용 가능 
x = 996
y = 8

quotient = x//y 
remainder = x % y
print("{}를 {}로 나누면 몫은 {}이고 나머지는 {}입니다".format(x,y,quotient,remainder))
print("{}를 {}로 나누면 몫은 {}이고 나머지는 {}입니다".format(x,y,x//y,x%y))

divmod(x,y) # 몫, 나머지 
q,r=divmod(x,y) ## 출력된 결과  (124, 4) 
q
r
type(divmod(x,y))

# %d : 수치형 
print("%d를 %d로 나누면 몫은 %d이고 나머지는 %d 입니다."
      %(x,y,q,r))

print('원주율은 %d 입니다.'%(3.141592)) # 정수로 반환
print('원주율은 %s 입니다.'%(3.141592)) # 문자
print('원주율은 %f 입니다.'%(3.141592)) # 실수형 
print('원주율은 {} 입니다'.format(3.141592)) 

str = '행복한 하루를 보내자'
len(str) #문자 길이

# index
str[0]
str[1]
## 제일 뒤에 있는 글자 
str[10]
str[len(str)-1]
str[-1]
str[-2]

# 슬라이싱
str[:]
str[0:2] # [시작 인덱스번호:끝 인덱스번호-1]
str[4:]
str[4:7]
str[4:-5]


x='0123456789'
x[::1] # 증가분 1씩 증가
x[::2] # 증가분 2씩 증가
x[0:7:2] #0246 # 0부터 6까지 2씩 증가한다
x[1:9:2] 
x[5::2]
x[::-1] # 역순으로 출력


x='파리썬'
x[0]
x[1]
x[2]
x[1] ='이' #인덱스 번호를 이용해서 수정 할 수 없다 .

# x.replace(원래,바꾸려는 것 ): 문자를 치환하는 함수
## 바로 적용 안됨. 
x.replace('리','이')
x = x.replace('리','이')


# 입력한 문자로 시작하는지 판단하는 함수
x = "hello world"

x[0]=='h'
x[0]=='H'
x.startswith('h')
x.startswith('he')
x.startswith('H')

# 입력한 문자로 끝나는지 판단하는 함수
x[-1]=='d'
x.endswith('d')
x[-2:]=='ld'
x.endswith('ld')
x.endswith('hello')
x.endswith('world')

'''.find : 문자의 위치를 찾는 함수, 
없으면 -1(False)로 리턴한다.'''
x
x.find('w')
x[6]
x.find('W')
x.find('world')
x.find('o',0) # o 가 나오는 첫번째 위치 리턴
x.find('o',5) # o 가 나오는 두번째 위치 리턴 
x.find('o',8)

x.index('o')
x.index('o',5)
x.find('W') # 찾는 문자가 없으면 -1 
x.index('W') # 찾는 문자가 없으면 오류

# 문자열이 있으면 True, 없으면 False
'o' in x
'O' in x

# .count() : 입력한 문자가 몇번 나오는지 리턴
x.count('l')
'hello world'.count('l')

# .upper() : 대문자로 리턴하는 함수
x.upper()

# .lower() : 소문자로 리턴하는 함수
x.lower()

# .capitalize() : 첫글자 대문자 나머지는 소문자로 리턴하는 함수
x.capitalize()

# .title() : 단어별로 첫글자 대문자 나머지는 소문자로 리턴하는 함수
x.title()

'HelLO wOrLD'.upper()

# 대문자 -> 소문자/ 소문자 -> 대문자
'HelLO wOrLD'.swapcase() 

# 글자 수 고정 후 중앙, 왼쪽, 오른쪽에 배치하는 함수
x.center(20)
x.ljust(20)
x.rjust(20)

y = x.center(20)
y
len(y)

# 공백 제거 
y.strip() # 양쪽 공백 제거

y.lstrip() # 왼쪽 공백 제거

y.rstrip() # 오른쪽 공백 제거


# 문자열 제거
x='helloh'
x.strip('h') # 양쪽 끝 h 제거
x.lstrip('h') # 왼쪽 끝 h 제거
x.rstrip('h') # 오른쪽 끝 h 제거


x='hello'
y='hello2021'
z='안녕하세요'

# isalpha: 문자열안에 알파벳, 한글로 이루어졌는지 확인하는 함수
x.isalpha()
y.isalpha()
z.isalpha()

# isalnum: 문자열 안에 알파벳, 숫자, 한글로 이루어졌는지 확인하는 함수
x.isalnum()
y.isalnum()
z.isalnum()

# isnumeric: 문자열 안이 숫자로 이루어졌는지 확인하는 함수
x.isnumeric()
y.isnumeric()
z.isnumeric()
'20210907'.isnumeric()
"2021.09.07".isnumeric()

# split : 분할하는 함수
x='hello, world'
x.split(',')

y = x.split(',')
type(y) # list (R에서의 vector 개념)

# join: 글자 사이에 특정한 문자열을 추가하는 함수 **
''.join(y)
' '.join(y)
','.join(y)

x= 'abc'
','.join(x)
'-'.join(x)


-------------------------------------------------------------------------------
[문제2] x 변수의 문자의 갯수를 구하세요.
        x="a b c d e f g"

[답] 
len(x)


[문제3] x 변수의 공백문자의 갯수를 구하세요.

[답]
x.count(' ')


[문제4] x 변수의 공백문자를 제외한 갯수를 구하세요.

[답]
len(x) - x.count(' ')



[문제5] x 변수에 있는 공백문자를 제거한 후 y변수에 입력해주세요

[답]
y = x.replace(' ','')



[문제6] y 변수에 있는 문자를 분리한 후 z변수에 입력해주세요.

[답]
y = ','.join(y)
z= y.split()
z
''.join(z)



[문제7] http:// 제거한 후 url 변수에 넣어 주세요.

[답]

# lstrip
url = 'http://www.python.org'
url = url.lstrip('http://')
url
type(url) = list

# replace
url = url.replace('http://','')
url
type(url) = str 


[문제8] url변수에 있는 문자 데이터에 '.'을 기준으로 분리하세요.

[답]
url = url.split('.')
url


[문제9] url변수에 있는 문자데이터를 www.python.org 모양으로 만드세요.
[답]

url= '.'.join(url)
url


[문제10] url변수에 있는 문자데이터를 대문자로 변환하세요.

url.upper()


[문제11] url변수에 있는 문자데이터를 소문자로 변환하세요.

url.lower()

--------------------------------------------------------------------------------

■ python 자료형 
1. list 
- 데이터의 목록을 다루는 자료형
- 서로 다른 데이터 타입을 가질 수 있다
- 중첩할 수 있다
- []
- list()

x1 = []
type(x1)

x2 = list()
type(x2)

x=[10,20,30]
x
type(x)
len(x)
x[0]
x[1]
x[2]
x[-1]
x[0:2]
x[1:]
x[:-1]

# 리스트 값 수정 
x[0] = 100
x
x[1:3] = [200,300]
x 

# .append: 리스트 변수에 값을 추가
x.append(400) #바로 적용
x

x1=[600,700]
x1

x.append(x1) # 중첩이 된다
del x[4] # 인덱스를 이용해서 삭제
x

# .extend(): 기존 리스트변수에 다른 리스트 변수를 이어 붙이는 함수
x.extend(x1)
x

# .insert: 인덱스를 이용해 특정 위치에 값을 입력
x.insert(4,500)
x

# 리스트 변수를 이어 붙이기.
x2 = [800,900]
x = x + x2 # 미리보기 
x

# .pop: 마지막 값 제거
# 위치 지정 가능 
x.pop()
x.pop(2)

del x[1]

# del: 변수 삭제 
del x

-------------------------------------------------------------------------------

drink = ['콜라','사이다','콜라','환타','사이다','콜라']
drink

drink.count('콜라')

# find는 리스트 변수에서는 사용할수 없다.(문자열에서만 사용이 가능)
drink.find('콜라') 

drink.index('콜라')
drink.index('콜라',1)
drink.index('콜라',3)
drink.index('콜라',6)

drink.pop(drink.index('콜라'))

# .remove() : 인덱스를 지정하지 않아도 삭제 가능 
drink.remove('콜라')

## 필요할 때는 반복문을 사용 
for i in drink:
    drink.remove('콜라')


# 중첩 리스트
    # 서로 다른 데이터 타입을 가질 수 있다.
    
x= [1,2,3,['a','b','c'],4,5]
type(x)
type(x[0])
x[3]
x[3][0]
type(x[3][0])

x[3][0:2]
x[3][-1]
len(x[3])
x[3].append('d')
x
x[3].pop()
x[3][0]=x[3][0].upper()
x
del x[3]
x

# clear: 리스트 변수값을 초기화
x.clear() 
x

dir() # 메모리에 x 변수 그대로 살아있음
id(x) # 메모리 주소 확인


# 정렬 

# x.sort() 
    # 바로 적용
    
x=[1,5,3,2,4]

x.sort() # 오름차순 

x.sort(reverse = True) # 내림차순 

# x.sorted()
    # 미리보기
    
x=[1,5,3,2,4]

sorted(x) 

sorted(x,reverse=True)

x[::-1] # 미리보기
x.reverse() #바로 적용
x


x = 
4-3*(100-x)**2/1600




GPA = Σ(每门课程绩点*每门课程学分)/Σ每门课程学分

320.3/120

(1.1*4)+(1.2*1)+(1.2*3)+(1*3)+(3.3*1)+(3.2*3)+(3.7*3)+(2.3*3)+(1.5*2)+(1*3)+(1.4*2)+(1*2)+(3.1*3)+(4*1)+(1*3)+(3.6*2)+(3.6*1)+(1*3)+(1*2)+(2.5*3)+(1*1)+(3.7*1)+(3.3*3)+(2.4*3)

= 115.3

(3.8*2)+(3.1*2)+(3.2*2)+(3*3)+(1.4*3)+(3.3*1)+(3.9*6)+(2.8*3)+(3.4*1)+(2.9*3)+(3.6*2)+(3.7*1)+(3.3*2)+(3.5*1)+(3.4*3)+(1.5*3)+(3.6*3)+(3.4*2)+(3.2*2)+(2.9*2)+(2.3*3)+(3.5*4)+(3.6*2)+(3.7*2)+(3.9*6)
= 205

115.3 + 205

1.1 + 1.2 + 1.2+ 1 + 3.3 + 3.2 + 3.7 + 2.3 + 1.5 + 1 + 1.4 + 1 + 3.1 + 4 + 1 + 3.6 + 3.6 + 1 + 1 + 2.5 + 1 + 3.7 + 3.3 + 2.4 
52.1
3.8 + 3.1 + 3.2 + 3 + 1.4 + 3.3 + 3.9 + 2.8 + 3.4 + 2.9 + 3.6 + 3.7 + 3.3 + 3.5 + 3.4 + 1.5 + 3.6 + 3.4 + 3.2 + 2.9 + 2.3 + 3.5 + 3.6 + 3.7 + 3.9
79.9

52.1+79.9

132
------------

4 + 1 + 3 + 3 + 1 + 3 + 3 + 3 + 2 + 3 + 2 + 2 + 3 + 1 + 3 + 2 + 1 + 3 + 2 + 3 + 1 + 1 + 3 + 3
56
2 + 2 + 2 + 3 + 3 + 1 + 6 + 3 + 1 + 3 + 2 + 1 + 2 + 1 + 3 + 3 + 3 + 2 + 2 + 2 + 3 + 4 + 2 + 2 + 6
64

56+64  

120

-----
